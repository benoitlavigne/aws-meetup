AWSTemplateFormatVersion: "2010-09-09"
Description: "Slack Workshop - AWS Apps"


Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Join
        - ""
        - - "SlackAwsWorkshop"
          - !Ref yourName
      Description: "Slack"

##############
  #Create all the resources needed for /events
##############

#Create the /events resource
  apiGatewayEventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "apiGateway"
      ParentId: !GetAtt "apiGateway.RootResourceId"
      PathPart: "events"

#Configure the POST method for /events
  apiGatewayEventsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunctionEvents.Arn"
      ResourceId: !Ref apiGatewayEventsResource
      RestApiId: !Ref "apiGateway"

  lambdaFunctionEvents:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: slack-aws-meetup-eu
        S3Key: Events-lambda.zip
      Description: "AWS Slack"
      FunctionName: !Join
        - ""
        - - "EventsAPI-"
          - !Ref yourName
      Environment:
        Variables:
          APP_TOKEN: your_app_verification_token
          BOT_TOKEN: your_bot_token
      Handler: "event_step1.event_handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunctionEvents.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/events"

##############
  #END Create all the resources needed for /events
##############


  ##############
  #Create all the resources needed for /actions
  ##############

  #Create the /events resource
  apiGatewayActionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "apiGateway"
      ParentId: !GetAtt "apiGateway.RootResourceId"
      PathPart: "actions"

  #Configure the POST method for /actions
  apiGatewayActionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunctionActions.Arn"
      ResourceId: !Ref apiGatewayActionsResource
      RestApiId: !Ref "apiGateway"

  lambdaFunctionActions:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: slack-aws-meetup-eu
        S3Key: Buttons-lambda.zip
      Description: "AWS-Slack"
      FunctionName: !Join
        - ""
        - - "ActionsAPI-"
          - !Ref yourName
      Environment:
        Variables:
          APP_TOKEN: your_app_verification_token
          BOT_TOKEN: your_bot_token

      Handler: "button_step3.button_handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10

  lambdaActionApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunctionActions.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/actions"

  ##############
  #END Create all the resources needed for /actions
  ##############


  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayEventsMethod"
      - "apiGatewayActionsMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: "default"


#Generic lambda IAM role
  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          PolicyName: "lambda"

Outputs:
  apiGatewayEventsURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/default/events"
  apiGatewayActionsURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/default/actions"

Parameters: 
  yourName: 
    Type: String
    Default: John-Doe
    Description: Enter a unique name for your stack, for instance firstName-lastName. This will allow you to identify your stack if several people on your team are completing the tutorial
